# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from media import media_pb2 as media_dot_media__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in media/media_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MediaServiceStub(object):
    """MediaService предоставляет API для управления медиафайлами
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPresignedUploadURL = channel.unary_unary(
                '/media.MediaService/GetPresignedUploadURL',
                request_serializer=media_dot_media__pb2.GetPresignedUploadURLRequest.SerializeToString,
                response_deserializer=media_dot_media__pb2.GetPresignedUploadURLResponse.FromString,
                _registered_method=True)
        self.ConfirmUpload = channel.unary_unary(
                '/media.MediaService/ConfirmUpload',
                request_serializer=media_dot_media__pb2.ConfirmUploadRequest.SerializeToString,
                response_deserializer=media_dot_media__pb2.ConfirmUploadResponse.FromString,
                _registered_method=True)
        self.GetMedia = channel.unary_unary(
                '/media.MediaService/GetMedia',
                request_serializer=media_dot_media__pb2.GetMediaRequest.SerializeToString,
                response_deserializer=media_dot_media__pb2.Media.FromString,
                _registered_method=True)
        self.GetMediaURL = channel.unary_unary(
                '/media.MediaService/GetMediaURL',
                request_serializer=media_dot_media__pb2.GetMediaURLRequest.SerializeToString,
                response_deserializer=media_dot_media__pb2.GetMediaURLResponse.FromString,
                _registered_method=True)
        self.OptimizeImage = channel.unary_unary(
                '/media.MediaService/OptimizeImage',
                request_serializer=media_dot_media__pb2.OptimizeImageRequest.SerializeToString,
                response_deserializer=media_dot_media__pb2.OptimizeImageResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/media.MediaService/HealthCheck',
                request_serializer=media_dot_media__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=media_dot_media__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class MediaServiceServicer(object):
    """MediaService предоставляет API для управления медиафайлами
    """

    def GetPresignedUploadURL(self, request, context):
        """Получение предподписанного URL для прямой загрузки в хранилище
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmUpload(self, request, context):
        """Подтверждение загрузки файла через предподписанный URL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMedia(self, request, context):
        """Получение информации о медиафайле
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMediaURL(self, request, context):
        """Получение URL для доступа к медиафайлу
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptimizeImage(self, request, context):
        """Оптимизация изображения
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Проверка здоровья сервиса
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPresignedUploadURL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPresignedUploadURL,
                    request_deserializer=media_dot_media__pb2.GetPresignedUploadURLRequest.FromString,
                    response_serializer=media_dot_media__pb2.GetPresignedUploadURLResponse.SerializeToString,
            ),
            'ConfirmUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmUpload,
                    request_deserializer=media_dot_media__pb2.ConfirmUploadRequest.FromString,
                    response_serializer=media_dot_media__pb2.ConfirmUploadResponse.SerializeToString,
            ),
            'GetMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMedia,
                    request_deserializer=media_dot_media__pb2.GetMediaRequest.FromString,
                    response_serializer=media_dot_media__pb2.Media.SerializeToString,
            ),
            'GetMediaURL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMediaURL,
                    request_deserializer=media_dot_media__pb2.GetMediaURLRequest.FromString,
                    response_serializer=media_dot_media__pb2.GetMediaURLResponse.SerializeToString,
            ),
            'OptimizeImage': grpc.unary_unary_rpc_method_handler(
                    servicer.OptimizeImage,
                    request_deserializer=media_dot_media__pb2.OptimizeImageRequest.FromString,
                    response_serializer=media_dot_media__pb2.OptimizeImageResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=media_dot_media__pb2.HealthCheckRequest.FromString,
                    response_serializer=media_dot_media__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'media.MediaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('media.MediaService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MediaService(object):
    """MediaService предоставляет API для управления медиафайлами
    """

    @staticmethod
    def GetPresignedUploadURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/GetPresignedUploadURL',
            media_dot_media__pb2.GetPresignedUploadURLRequest.SerializeToString,
            media_dot_media__pb2.GetPresignedUploadURLResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/ConfirmUpload',
            media_dot_media__pb2.ConfirmUploadRequest.SerializeToString,
            media_dot_media__pb2.ConfirmUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/GetMedia',
            media_dot_media__pb2.GetMediaRequest.SerializeToString,
            media_dot_media__pb2.Media.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMediaURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/GetMediaURL',
            media_dot_media__pb2.GetMediaURLRequest.SerializeToString,
            media_dot_media__pb2.GetMediaURLResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OptimizeImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/OptimizeImage',
            media_dot_media__pb2.OptimizeImageRequest.SerializeToString,
            media_dot_media__pb2.OptimizeImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/HealthCheck',
            media_dot_media__pb2.HealthCheckRequest.SerializeToString,
            media_dot_media__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
