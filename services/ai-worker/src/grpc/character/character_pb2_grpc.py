# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from character import character_pb2 as character_dot_character__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in character/character_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CharacterServiceStub(object):
    """Character service for managing characters in worlds
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCharacter = channel.unary_unary(
                '/generia.character.CharacterService/CreateCharacter',
                request_serializer=character_dot_character__pb2.CreateCharacterRequest.SerializeToString,
                response_deserializer=character_dot_character__pb2.Character.FromString,
                _registered_method=True)
        self.UpdateCharacter = channel.unary_unary(
                '/generia.character.CharacterService/UpdateCharacter',
                request_serializer=character_dot_character__pb2.UpdateCharacterRequest.SerializeToString,
                response_deserializer=character_dot_character__pb2.Character.FromString,
                _registered_method=True)
        self.GetCharacter = channel.unary_unary(
                '/generia.character.CharacterService/GetCharacter',
                request_serializer=character_dot_character__pb2.GetCharacterRequest.SerializeToString,
                response_deserializer=character_dot_character__pb2.Character.FromString,
                _registered_method=True)
        self.GetUserCharactersInWorld = channel.unary_unary(
                '/generia.character.CharacterService/GetUserCharactersInWorld',
                request_serializer=character_dot_character__pb2.GetUserCharactersInWorldRequest.SerializeToString,
                response_deserializer=character_dot_character__pb2.CharacterList.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/generia.character.CharacterService/HealthCheck',
                request_serializer=character_dot_character__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=character_dot_character__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class CharacterServiceServicer(object):
    """Character service for managing characters in worlds
    """

    def CreateCharacter(self, request, context):
        """Create a character profile for a real user or AI
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCharacter(self, request, context):
        """Update an existing character
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCharacter(self, request, context):
        """Get a character by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserCharactersInWorld(self, request, context):
        """Get a user's characters in a specific world
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CharacterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCharacter,
                    request_deserializer=character_dot_character__pb2.CreateCharacterRequest.FromString,
                    response_serializer=character_dot_character__pb2.Character.SerializeToString,
            ),
            'UpdateCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCharacter,
                    request_deserializer=character_dot_character__pb2.UpdateCharacterRequest.FromString,
                    response_serializer=character_dot_character__pb2.Character.SerializeToString,
            ),
            'GetCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCharacter,
                    request_deserializer=character_dot_character__pb2.GetCharacterRequest.FromString,
                    response_serializer=character_dot_character__pb2.Character.SerializeToString,
            ),
            'GetUserCharactersInWorld': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserCharactersInWorld,
                    request_deserializer=character_dot_character__pb2.GetUserCharactersInWorldRequest.FromString,
                    response_serializer=character_dot_character__pb2.CharacterList.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=character_dot_character__pb2.HealthCheckRequest.FromString,
                    response_serializer=character_dot_character__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'generia.character.CharacterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('generia.character.CharacterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CharacterService(object):
    """Character service for managing characters in worlds
    """

    @staticmethod
    def CreateCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/generia.character.CharacterService/CreateCharacter',
            character_dot_character__pb2.CreateCharacterRequest.SerializeToString,
            character_dot_character__pb2.Character.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/generia.character.CharacterService/UpdateCharacter',
            character_dot_character__pb2.UpdateCharacterRequest.SerializeToString,
            character_dot_character__pb2.Character.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/generia.character.CharacterService/GetCharacter',
            character_dot_character__pb2.GetCharacterRequest.SerializeToString,
            character_dot_character__pb2.Character.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserCharactersInWorld(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/generia.character.CharacterService/GetUserCharactersInWorld',
            character_dot_character__pb2.GetUserCharactersInWorldRequest.SerializeToString,
            character_dot_character__pb2.CharacterList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/generia.character.CharacterService/HealthCheck',
            character_dot_character__pb2.HealthCheckRequest.SerializeToString,
            character_dot_character__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
