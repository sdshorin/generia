# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from post import post_pb2 as post_dot_post__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in post/post_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PostServiceStub(object):
    """PostService предоставляет API для создания и получения постов
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/post.PostService/CreatePost',
                request_serializer=post_dot_post__pb2.CreatePostRequest.SerializeToString,
                response_deserializer=post_dot_post__pb2.CreatePostResponse.FromString,
                _registered_method=True)
        self.CreateAIPost = channel.unary_unary(
                '/post.PostService/CreateAIPost',
                request_serializer=post_dot_post__pb2.CreateAIPostRequest.SerializeToString,
                response_deserializer=post_dot_post__pb2.CreatePostResponse.FromString,
                _registered_method=True)
        self.GetPost = channel.unary_unary(
                '/post.PostService/GetPost',
                request_serializer=post_dot_post__pb2.GetPostRequest.SerializeToString,
                response_deserializer=post_dot_post__pb2.Post.FromString,
                _registered_method=True)
        self.GetUserPosts = channel.unary_unary(
                '/post.PostService/GetUserPosts',
                request_serializer=post_dot_post__pb2.GetUserPostsRequest.SerializeToString,
                response_deserializer=post_dot_post__pb2.PostList.FromString,
                _registered_method=True)
        self.GetCharacterPosts = channel.unary_unary(
                '/post.PostService/GetCharacterPosts',
                request_serializer=post_dot_post__pb2.GetCharacterPostsRequest.SerializeToString,
                response_deserializer=post_dot_post__pb2.PostList.FromString,
                _registered_method=True)
        self.GetPostsByIds = channel.unary_unary(
                '/post.PostService/GetPostsByIds',
                request_serializer=post_dot_post__pb2.GetPostsByIdsRequest.SerializeToString,
                response_deserializer=post_dot_post__pb2.PostList.FromString,
                _registered_method=True)
        self.GetGlobalFeed = channel.unary_unary(
                '/post.PostService/GetGlobalFeed',
                request_serializer=post_dot_post__pb2.GetGlobalFeedRequest.SerializeToString,
                response_deserializer=post_dot_post__pb2.PostList.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/post.PostService/HealthCheck',
                request_serializer=post_dot_post__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=post_dot_post__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class PostServiceServicer(object):
    """PostService предоставляет API для создания и получения постов
    """

    def CreatePost(self, request, context):
        """Создание поста
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAIPost(self, request, context):
        """Создание AI поста (внутренний метод для AI генератора)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPost(self, request, context):
        """Получение поста по ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPosts(self, request, context):
        """Получение постов пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCharacterPosts(self, request, context):
        """Получение постов по character_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPostsByIds(self, request, context):
        """Получение нескольких постов по ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGlobalFeed(self, request, context):
        """Получение постов для глобальной ленты
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Проверка здоровья сервиса
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PostServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=post_dot_post__pb2.CreatePostRequest.FromString,
                    response_serializer=post_dot_post__pb2.CreatePostResponse.SerializeToString,
            ),
            'CreateAIPost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAIPost,
                    request_deserializer=post_dot_post__pb2.CreateAIPostRequest.FromString,
                    response_serializer=post_dot_post__pb2.CreatePostResponse.SerializeToString,
            ),
            'GetPost': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPost,
                    request_deserializer=post_dot_post__pb2.GetPostRequest.FromString,
                    response_serializer=post_dot_post__pb2.Post.SerializeToString,
            ),
            'GetUserPosts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserPosts,
                    request_deserializer=post_dot_post__pb2.GetUserPostsRequest.FromString,
                    response_serializer=post_dot_post__pb2.PostList.SerializeToString,
            ),
            'GetCharacterPosts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCharacterPosts,
                    request_deserializer=post_dot_post__pb2.GetCharacterPostsRequest.FromString,
                    response_serializer=post_dot_post__pb2.PostList.SerializeToString,
            ),
            'GetPostsByIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostsByIds,
                    request_deserializer=post_dot_post__pb2.GetPostsByIdsRequest.FromString,
                    response_serializer=post_dot_post__pb2.PostList.SerializeToString,
            ),
            'GetGlobalFeed': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGlobalFeed,
                    request_deserializer=post_dot_post__pb2.GetGlobalFeedRequest.FromString,
                    response_serializer=post_dot_post__pb2.PostList.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=post_dot_post__pb2.HealthCheckRequest.FromString,
                    response_serializer=post_dot_post__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'post.PostService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('post.PostService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PostService(object):
    """PostService предоставляет API для создания и получения постов
    """

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/post.PostService/CreatePost',
            post_dot_post__pb2.CreatePostRequest.SerializeToString,
            post_dot_post__pb2.CreatePostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAIPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/post.PostService/CreateAIPost',
            post_dot_post__pb2.CreateAIPostRequest.SerializeToString,
            post_dot_post__pb2.CreatePostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/post.PostService/GetPost',
            post_dot_post__pb2.GetPostRequest.SerializeToString,
            post_dot_post__pb2.Post.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserPosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/post.PostService/GetUserPosts',
            post_dot_post__pb2.GetUserPostsRequest.SerializeToString,
            post_dot_post__pb2.PostList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCharacterPosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/post.PostService/GetCharacterPosts',
            post_dot_post__pb2.GetCharacterPostsRequest.SerializeToString,
            post_dot_post__pb2.PostList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPostsByIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/post.PostService/GetPostsByIds',
            post_dot_post__pb2.GetPostsByIdsRequest.SerializeToString,
            post_dot_post__pb2.PostList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGlobalFeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/post.PostService/GetGlobalFeed',
            post_dot_post__pb2.GetGlobalFeedRequest.SerializeToString,
            post_dot_post__pb2.PostList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/post.PostService/HealthCheck',
            post_dot_post__pb2.HealthCheckRequest.SerializeToString,
            post_dot_post__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
