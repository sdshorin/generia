// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cdn/cdn.proto

package cdn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CDNService_GetSignedURL_FullMethodName    = "/cdn.CDNService/GetSignedURL"
	CDNService_InvalidateCache_FullMethodName = "/cdn.CDNService/InvalidateCache"
	CDNService_GetCDNConfig_FullMethodName    = "/cdn.CDNService/GetCDNConfig"
	CDNService_HealthCheck_FullMethodName     = "/cdn.CDNService/HealthCheck"
)

// CDNServiceClient is the client API for CDNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CDNService предоставляет API для управления доставкой контента через CDN
type CDNServiceClient interface {
	// Получение подписанного URL для доступа к файлу
	GetSignedURL(ctx context.Context, in *GetSignedURLRequest, opts ...grpc.CallOption) (*GetSignedURLResponse, error)
	// Инвалидация кеша для файла
	InvalidateCache(ctx context.Context, in *InvalidateCacheRequest, opts ...grpc.CallOption) (*InvalidateCacheResponse, error)
	// Получение конфигурации CDN
	GetCDNConfig(ctx context.Context, in *GetCDNConfigRequest, opts ...grpc.CallOption) (*GetCDNConfigResponse, error)
	// Проверка здоровья сервиса
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type cDNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCDNServiceClient(cc grpc.ClientConnInterface) CDNServiceClient {
	return &cDNServiceClient{cc}
}

func (c *cDNServiceClient) GetSignedURL(ctx context.Context, in *GetSignedURLRequest, opts ...grpc.CallOption) (*GetSignedURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSignedURLResponse)
	err := c.cc.Invoke(ctx, CDNService_GetSignedURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNServiceClient) InvalidateCache(ctx context.Context, in *InvalidateCacheRequest, opts ...grpc.CallOption) (*InvalidateCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvalidateCacheResponse)
	err := c.cc.Invoke(ctx, CDNService_InvalidateCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNServiceClient) GetCDNConfig(ctx context.Context, in *GetCDNConfigRequest, opts ...grpc.CallOption) (*GetCDNConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCDNConfigResponse)
	err := c.cc.Invoke(ctx, CDNService_GetCDNConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, CDNService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDNServiceServer is the server API for CDNService service.
// All implementations must embed UnimplementedCDNServiceServer
// for forward compatibility.
//
// CDNService предоставляет API для управления доставкой контента через CDN
type CDNServiceServer interface {
	// Получение подписанного URL для доступа к файлу
	GetSignedURL(context.Context, *GetSignedURLRequest) (*GetSignedURLResponse, error)
	// Инвалидация кеша для файла
	InvalidateCache(context.Context, *InvalidateCacheRequest) (*InvalidateCacheResponse, error)
	// Получение конфигурации CDN
	GetCDNConfig(context.Context, *GetCDNConfigRequest) (*GetCDNConfigResponse, error)
	// Проверка здоровья сервиса
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedCDNServiceServer()
}

// UnimplementedCDNServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCDNServiceServer struct{}

func (UnimplementedCDNServiceServer) GetSignedURL(context.Context, *GetSignedURLRequest) (*GetSignedURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedURL not implemented")
}
func (UnimplementedCDNServiceServer) InvalidateCache(context.Context, *InvalidateCacheRequest) (*InvalidateCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCache not implemented")
}
func (UnimplementedCDNServiceServer) GetCDNConfig(context.Context, *GetCDNConfigRequest) (*GetCDNConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDNConfig not implemented")
}
func (UnimplementedCDNServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCDNServiceServer) mustEmbedUnimplementedCDNServiceServer() {}
func (UnimplementedCDNServiceServer) testEmbeddedByValue()                    {}

// UnsafeCDNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CDNServiceServer will
// result in compilation errors.
type UnsafeCDNServiceServer interface {
	mustEmbedUnimplementedCDNServiceServer()
}

func RegisterCDNServiceServer(s grpc.ServiceRegistrar, srv CDNServiceServer) {
	// If the following call pancis, it indicates UnimplementedCDNServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CDNService_ServiceDesc, srv)
}

func _CDNService_GetSignedURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServiceServer).GetSignedURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDNService_GetSignedURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServiceServer).GetSignedURL(ctx, req.(*GetSignedURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDNService_InvalidateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServiceServer).InvalidateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDNService_InvalidateCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServiceServer).InvalidateCache(ctx, req.(*InvalidateCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDNService_GetCDNConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCDNConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServiceServer).GetCDNConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDNService_GetCDNConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServiceServer).GetCDNConfig(ctx, req.(*GetCDNConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDNService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDNService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CDNService_ServiceDesc is the grpc.ServiceDesc for CDNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CDNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cdn.CDNService",
	HandlerType: (*CDNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignedURL",
			Handler:    _CDNService_GetSignedURL_Handler,
		},
		{
			MethodName: "InvalidateCache",
			Handler:    _CDNService_InvalidateCache_Handler,
		},
		{
			MethodName: "GetCDNConfig",
			Handler:    _CDNService_GetCDNConfig_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _CDNService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdn/cdn.proto",
}
