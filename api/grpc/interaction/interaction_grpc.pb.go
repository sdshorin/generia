// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: interaction/interaction.proto

package interaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InteractionService_LikePost_FullMethodName        = "/interaction.InteractionService/LikePost"
	InteractionService_UnlikePost_FullMethodName      = "/interaction.InteractionService/UnlikePost"
	InteractionService_GetPostLikes_FullMethodName    = "/interaction.InteractionService/GetPostLikes"
	InteractionService_CheckUserLiked_FullMethodName  = "/interaction.InteractionService/CheckUserLiked"
	InteractionService_AddComment_FullMethodName      = "/interaction.InteractionService/AddComment"
	InteractionService_GetPostComments_FullMethodName = "/interaction.InteractionService/GetPostComments"
	InteractionService_GetPostStats_FullMethodName    = "/interaction.InteractionService/GetPostStats"
	InteractionService_GetPostsStats_FullMethodName   = "/interaction.InteractionService/GetPostsStats"
	InteractionService_HealthCheck_FullMethodName     = "/interaction.InteractionService/HealthCheck"
)

// InteractionServiceClient is the client API for InteractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InteractionService предоставляет API для взаимодействий с постами (лайки, комментарии)
type InteractionServiceClient interface {
	// Лайки
	LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error)
	UnlikePost(ctx context.Context, in *UnlikePostRequest, opts ...grpc.CallOption) (*UnlikePostResponse, error)
	GetPostLikes(ctx context.Context, in *GetPostLikesRequest, opts ...grpc.CallOption) (*PostLikesResponse, error)
	CheckUserLiked(ctx context.Context, in *CheckUserLikedRequest, opts ...grpc.CallOption) (*CheckUserLikedResponse, error)
	// Комментарии
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	GetPostComments(ctx context.Context, in *GetPostCommentsRequest, opts ...grpc.CallOption) (*PostCommentsResponse, error)
	// Статистика
	GetPostStats(ctx context.Context, in *GetPostStatsRequest, opts ...grpc.CallOption) (*PostStatsResponse, error)
	GetPostsStats(ctx context.Context, in *GetPostsStatsRequest, opts ...grpc.CallOption) (*PostsStatsResponse, error)
	// Проверка здоровья сервиса
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type interactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionServiceClient(cc grpc.ClientConnInterface) InteractionServiceClient {
	return &interactionServiceClient{cc}
}

func (c *interactionServiceClient) LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikePostResponse)
	err := c.cc.Invoke(ctx, InteractionService_LikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) UnlikePost(ctx context.Context, in *UnlikePostRequest, opts ...grpc.CallOption) (*UnlikePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlikePostResponse)
	err := c.cc.Invoke(ctx, InteractionService_UnlikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetPostLikes(ctx context.Context, in *GetPostLikesRequest, opts ...grpc.CallOption) (*PostLikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostLikesResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetPostLikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) CheckUserLiked(ctx context.Context, in *CheckUserLikedRequest, opts ...grpc.CallOption) (*CheckUserLikedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserLikedResponse)
	err := c.cc.Invoke(ctx, InteractionService_CheckUserLiked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, InteractionService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetPostComments(ctx context.Context, in *GetPostCommentsRequest, opts ...grpc.CallOption) (*PostCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCommentsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetPostComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetPostStats(ctx context.Context, in *GetPostStatsRequest, opts ...grpc.CallOption) (*PostStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostStatsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetPostStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetPostsStats(ctx context.Context, in *GetPostsStatsRequest, opts ...grpc.CallOption) (*PostsStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostsStatsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetPostsStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, InteractionService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServiceServer is the server API for InteractionService service.
// All implementations must embed UnimplementedInteractionServiceServer
// for forward compatibility.
//
// InteractionService предоставляет API для взаимодействий с постами (лайки, комментарии)
type InteractionServiceServer interface {
	// Лайки
	LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error)
	UnlikePost(context.Context, *UnlikePostRequest) (*UnlikePostResponse, error)
	GetPostLikes(context.Context, *GetPostLikesRequest) (*PostLikesResponse, error)
	CheckUserLiked(context.Context, *CheckUserLikedRequest) (*CheckUserLikedResponse, error)
	// Комментарии
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	GetPostComments(context.Context, *GetPostCommentsRequest) (*PostCommentsResponse, error)
	// Статистика
	GetPostStats(context.Context, *GetPostStatsRequest) (*PostStatsResponse, error)
	GetPostsStats(context.Context, *GetPostsStatsRequest) (*PostsStatsResponse, error)
	// Проверка здоровья сервиса
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedInteractionServiceServer()
}

// UnimplementedInteractionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractionServiceServer struct{}

func (UnimplementedInteractionServiceServer) LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedInteractionServiceServer) UnlikePost(context.Context, *UnlikePostRequest) (*UnlikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikePost not implemented")
}
func (UnimplementedInteractionServiceServer) GetPostLikes(context.Context, *GetPostLikesRequest) (*PostLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostLikes not implemented")
}
func (UnimplementedInteractionServiceServer) CheckUserLiked(context.Context, *CheckUserLikedRequest) (*CheckUserLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserLiked not implemented")
}
func (UnimplementedInteractionServiceServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedInteractionServiceServer) GetPostComments(context.Context, *GetPostCommentsRequest) (*PostCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostComments not implemented")
}
func (UnimplementedInteractionServiceServer) GetPostStats(context.Context, *GetPostStatsRequest) (*PostStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostStats not implemented")
}
func (UnimplementedInteractionServiceServer) GetPostsStats(context.Context, *GetPostsStatsRequest) (*PostsStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsStats not implemented")
}
func (UnimplementedInteractionServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedInteractionServiceServer) mustEmbedUnimplementedInteractionServiceServer() {}
func (UnimplementedInteractionServiceServer) testEmbeddedByValue()                            {}

// UnsafeInteractionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServiceServer will
// result in compilation errors.
type UnsafeInteractionServiceServer interface {
	mustEmbedUnimplementedInteractionServiceServer()
}

func RegisterInteractionServiceServer(s grpc.ServiceRegistrar, srv InteractionServiceServer) {
	// If the following call pancis, it indicates UnimplementedInteractionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InteractionService_ServiceDesc, srv)
}

func _InteractionService_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).LikePost(ctx, req.(*LikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_UnlikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).UnlikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_UnlikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).UnlikePost(ctx, req.(*UnlikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetPostLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetPostLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetPostLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetPostLikes(ctx, req.(*GetPostLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_CheckUserLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).CheckUserLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_CheckUserLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).CheckUserLiked(ctx, req.(*CheckUserLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetPostComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetPostComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetPostComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetPostComments(ctx, req.(*GetPostCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetPostStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetPostStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetPostStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetPostStats(ctx, req.(*GetPostStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetPostsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetPostsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetPostsStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetPostsStats(ctx, req.(*GetPostsStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionService_ServiceDesc is the grpc.ServiceDesc for InteractionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaction.InteractionService",
	HandlerType: (*InteractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikePost",
			Handler:    _InteractionService_LikePost_Handler,
		},
		{
			MethodName: "UnlikePost",
			Handler:    _InteractionService_UnlikePost_Handler,
		},
		{
			MethodName: "GetPostLikes",
			Handler:    _InteractionService_GetPostLikes_Handler,
		},
		{
			MethodName: "CheckUserLiked",
			Handler:    _InteractionService_CheckUserLiked_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _InteractionService_AddComment_Handler,
		},
		{
			MethodName: "GetPostComments",
			Handler:    _InteractionService_GetPostComments_Handler,
		},
		{
			MethodName: "GetPostStats",
			Handler:    _InteractionService_GetPostStats_Handler,
		},
		{
			MethodName: "GetPostsStats",
			Handler:    _InteractionService_GetPostsStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _InteractionService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction/interaction.proto",
}
