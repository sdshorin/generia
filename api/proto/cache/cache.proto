syntax = "proto3";

package cache;

option go_package = "instagram-clone/api/proto/cache";

// CacheService предоставляет API для кеширования данных
service CacheService {
  // Установка значения в кеш
  rpc Set(SetRequest) returns (SetResponse);
  
  // Получение значения из кеша
  rpc Get(GetRequest) returns (GetResponse);
  
  // Удаление значения из кеша
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  
  // Инкремент счетчика
  rpc Increment(IncrementRequest) returns (IncrementResponse);
  
  // Декремент счетчика
  rpc Decrement(DecrementRequest) returns (DecrementResponse);
  
  // Добавление значения в список
  rpc AddToList(AddToListRequest) returns (AddToListResponse);
  
  // Получение списка из кеша
  rpc GetList(GetListRequest) returns (GetListResponse);

  // Установка хеша в кеш
  rpc HSet(HSetRequest) returns (HSetResponse);

  // Получение хеша из кеша
  rpc HGet(HGetRequest) returns (HGetResponse);

  // Проверка здоровья сервиса
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message SetRequest {
  string key = 1;
  bytes value = 2;
  int32 ttl = 3; // Время жизни в секундах
}

message SetResponse {
  bool success = 1;
}

message GetRequest {
  string key = 1;
}

message GetResponse {
  bool exists = 1;
  bytes value = 2;
}

message DeleteRequest {
  string key = 1;
}

message DeleteResponse {
  bool success = 1;
}

message IncrementRequest {
  string key = 1;
  int32 value = 2; // Значение для инкремента
}

message IncrementResponse {
  int64 new_value = 1;
}

message DecrementRequest {
  string key = 1;
  int32 value = 2; // Значение для декремента
}

message DecrementResponse {
  int64 new_value = 1;
}

message AddToListRequest {
  string key = 1;
  bytes value = 2;
  int32 ttl = 3; // Время жизни в секундах
  double score = 4; // Для сортированных наборов
}

message AddToListResponse {
  bool success = 1;
  int64 list_size = 2;
}

message GetListRequest {
  string key = 1;
  int32 offset = 2;
  int32 limit = 3;
}

message GetListResponse {
  repeated bytes values = 1;
  int64 total = 2;
}

message HSetRequest {
  string key = 1;
  map<string, bytes> fields = 2;
  int32 ttl = 3; // Время жизни в секундах
}

message HSetResponse {
  bool success = 1;
}

message HGetRequest {
  string key = 1;
  repeated string fields = 2; // Если пусто, то вернуть все поля
}

message HGetResponse {
  bool exists = 1;
  map<string, bytes> fields = 2;
}

message HealthCheckRequest {
  // Пустой запрос
}

message HealthCheckResponse {
  enum Status {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  Status status = 1;
}
