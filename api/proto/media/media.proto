
syntax = "proto3";

package media;

option go_package = "github.com/sdshorin/generia/api/proto/media";

// MediaService предоставляет API для управления медиафайлами
service MediaService {

  // Получение предподписанного URL для прямой загрузки в хранилище
  rpc GetPresignedUploadURL(GetPresignedUploadURLRequest) returns (GetPresignedUploadURLResponse);

  // Подтверждение загрузки файла через предподписанный URL
  rpc ConfirmUpload(ConfirmUploadRequest) returns (ConfirmUploadResponse);

  // Получение информации о медиафайле
  rpc GetMedia(GetMediaRequest) returns (Media);

  // Получение URL для доступа к медиафайлу
  rpc GetMediaURL(GetMediaURLRequest) returns (GetMediaURLResponse);

  // Оптимизация изображения
  rpc OptimizeImage(OptimizeImageRequest) returns (OptimizeImageResponse);

  // Проверка здоровья сервиса
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}


message MediaMetadata {
  string character_id = 1;
  string world_id = 2;
  string filename = 3;
  string content_type = 4;
  int64 size = 5;
}

message MediaVariant {
  string name = 1; // original, thumbnail, medium
  string url = 2;
  int32 width = 3;
  int32 height = 4;
}

message GetMediaRequest {
  string media_id = 1;
}

message Media {
  string media_id = 1;
  string character_id = 2;  // Optional for world-level media
  string world_id = 3;
  string filename = 4;
  string content_type = 5;
  int64 size = 6;
  repeated MediaVariant variants = 7;
  string created_at = 8; // ISO 8601 format
  MediaType media_type = 9;
}

message GetMediaURLRequest {
  string media_id = 1;
  string variant = 2; // original, thumbnail, medium
  int64 expires_in = 3; // Время жизни URL в секундах
}

message GetMediaURLResponse {
  string url = 1;
  int64 expires_at = 2; // Unix timestamp
}

message OptimizeImageRequest {
  string media_id = 1;
  repeated string variants_to_create = 2; // thumbnail, medium, etc.
}

message OptimizeImageResponse {
  repeated MediaVariant variants = 1;
}

// Enum for media types to determine storage path structure
enum MediaType {
  MEDIA_TYPE_UNKNOWN = 0;
  MEDIA_TYPE_WORLD_HEADER = 1;    // world_id/world_data/header.png
  MEDIA_TYPE_WORLD_ICON = 2;      // world_id/world_data/icon.png
  MEDIA_TYPE_CHARACTER_AVATAR = 3; // world_id/character_id/avatars/avatar.png
  MEDIA_TYPE_POST_IMAGE = 4;      // world_id/character_id/posts/post.png
}

message GetPresignedUploadURLRequest {
  string world_id = 1;
  string character_id = 2;  // Optional for world-level media
  string filename = 3;
  string content_type = 4;
  int64 size = 5;
  MediaType media_type = 6;
}

message GetPresignedUploadURLResponse {
  string media_id = 1;
  string upload_url = 2;
  int64 expires_at = 3; // Unix timestamp
}

message ConfirmUploadRequest {
  string media_id = 1;
}

message ConfirmUploadResponse {
  bool success = 1;
  repeated MediaVariant variants = 2;
}


message HealthCheckRequest {
  // Пустой запрос
}

message HealthCheckResponse {
  enum Status {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  Status status = 1;
}
