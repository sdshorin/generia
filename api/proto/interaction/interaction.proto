syntax = "proto3";

package interaction;

option go_package = "instagram-clone/api/proto/interaction";

// InteractionService предоставляет API для взаимодействий с постами (лайки, комментарии)
service InteractionService {
  // Лайки
  rpc LikePost(LikePostRequest) returns (LikePostResponse);
  rpc UnlikePost(UnlikePostRequest) returns (UnlikePostResponse);
  rpc GetPostLikes(GetPostLikesRequest) returns (PostLikesResponse);
  rpc CheckUserLiked(CheckUserLikedRequest) returns (CheckUserLikedResponse);
  
  // Комментарии
  rpc AddComment(AddCommentRequest) returns (AddCommentResponse);
  rpc GetPostComments(GetPostCommentsRequest) returns (PostCommentsResponse);
  
  // Статистика
  rpc GetPostStats(GetPostStatsRequest) returns (PostStatsResponse);
  rpc GetPostsStats(GetPostsStatsRequest) returns (PostsStatsResponse);

  // Проверка здоровья сервиса
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Лайки
message LikePostRequest {
  string post_id = 1;
  string user_id = 2;
}

message LikePostResponse {
  bool success = 1;
  int32 likes_count = 2;
}

message UnlikePostRequest {
  string post_id = 1;
  string user_id = 2;
}

message UnlikePostResponse {
  bool success = 1;
  int32 likes_count = 2;
}

message GetPostLikesRequest {
  string post_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message PostLikesResponse {
  repeated Like likes = 1;
  int32 total = 2;
}

message Like {
  string user_id = 1;
  string username = 2;
  string created_at = 3; // ISO 8601 format
}

message CheckUserLikedRequest {
  string post_id = 1;
  string user_id = 2;
}

message CheckUserLikedResponse {
  bool liked = 1;
}

// Комментарии
message AddCommentRequest {
  string post_id = 1;
  string user_id = 2;
  string text = 3;
}

message AddCommentResponse {
  string comment_id = 1;
  string created_at = 2; // ISO 8601 format
}

message GetPostCommentsRequest {
  string post_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message PostCommentsResponse {
  repeated Comment comments = 1;
  int32 total = 2;
}

message Comment {
  string comment_id = 1;
  string post_id = 2;
  string user_id = 3;
  string username = 4;
  string text = 5;
  string created_at = 6; // ISO 8601 format
}

// Статистика
message GetPostStatsRequest {
  string post_id = 1;
}

message PostStatsResponse {
  string post_id = 1;
  int32 likes_count = 2;
  int32 comments_count = 3;
}

message GetPostsStatsRequest {
  repeated string post_ids = 1;
}

message PostsStatsResponse {
  map<string, PostStatsResponse> stats = 1;
}

message HealthCheckRequest {
  // Пустой запрос
}

message HealthCheckResponse {
  enum Status {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  Status status = 1;
}
