version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:14-alpine
    container_name: generia-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=generia
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - generia_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: generia-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - generia_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: generia-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    command: ["mongod",
            "--quiet",           # убирает INFO-логи
            "--logappend"]
            # "--logpath", "/proc/self/fd/1"]  # пишет в stdout, но уже тихо
    volumes:
      - mongo_data:/data/db
    networks:
      - generia_network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok"]
      interval: 100s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio
    container_name: generia-minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      # - MINIO_SERVER_URL:"https://localhost:9000"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - generia_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  consul:
    image: hashicorp/consul:latest
    container_name: generia-consul
    restart: always
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - generia_network
    healthcheck:
      test: ["CMD", "consul", "info"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Database
  temporal-postgres:
    image: postgres:15
    container_name: generia-temporal-postgres
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: temporal
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
    volumes:
      - temporal_postgres_data:/var/lib/postgresql/data
    networks:
      - generia_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.27.2.0
    container_name: generia-temporal
    restart: always
    ports:
      - "7233:7233"
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-postgres
    depends_on:
      temporal-postgres:
        condition: service_healthy
    networks:
      - generia_network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Temporal Web UI

  temporal-ui:
    image: temporalio/ui:2.36.4
    container_name: generia-temporal-ui
    restart: always
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
      - TEMPORAL_UI_PORT=8090
    ports:
      - "8090:8090"
    networks:
      - generia_network
  

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: generia-jaeger
    restart: always
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # Collector HTTP
      - "4317:4317"    # OTLP gRPC endpoint
      - "4318:4318"    # OTLP HTTP endpoint
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - generia_network

  prometheus:
    image: prom/prometheus:latest
    container_name: generia-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - generia_network

  grafana:
    image: grafana/grafana:latest
    container_name: generia-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - generia_network
    depends_on:
      - prometheus

  # Backend Microservices
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: generia-api-gateway
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - post-service
      - media-service
      - interaction-service
      - feed-service
      - cache-service
      - cdn-service
      - consul
      - jaeger
    environment:
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=api-gateway
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - JWT_SECRET=your_jwt_secret_key
      - JWT_EXPIRATION=24h
    networks:
      - generia_network

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: generia-auth-service
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      consul:
        condition: service_started

      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=auth-service
      - SERVICE_PORT=8081
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=auth-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=generia
      - DB_SSL_MODE=disable
      - JWT_SECRET=your_jwt_secret_key
      - JWT_EXPIRATION=24h

    networks:
      - generia_network

  post-service:
    build:
      context: .
      dockerfile: services/post-service/Dockerfile
    container_name: generia-post-service
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      consul:
        condition: service_started

      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=post-service
      - SERVICE_PORT=8082
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=post-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=generia
      - DB_SSL_MODE=disable

    networks:
      - generia_network

  media-service:
    build:
      context: .
      dockerfile: services/media-service/Dockerfile
    container_name: generia-media-service
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      consul:
        condition: service_started

      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=media-service
      - SERVICE_PORT=8083
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=media-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=generia
      - DB_SSL_MODE=disable
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=generia-images
      - MINIO_USE_SSL=false

    networks:
      - generia_network

  interaction-service:
    build:
      context: .
      dockerfile: services/interaction-service/Dockerfile
    container_name: generia-interaction-service
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      mongodb:
        condition: service_started
      consul:
        condition: service_started

      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=interaction-service
      - SERVICE_PORT=8084
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=interaction-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - MONGODB_URI=mongodb://admin:password@mongodb:27017
      - MONGODB_DATABASE=generia_interactions

    networks:
      - generia_network

  feed-service:
    build:
      context: .
      dockerfile: services/feed-service/Dockerfile
    container_name: generia-feed-service
    restart: always
    ports:
      - "8085:8085"
    depends_on:
      redis:
        condition: service_healthy
      consul:
        condition: service_started

      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=feed-service
      - SERVICE_PORT=8085
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=feed-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - REDIS_ADDRESS=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0

    networks:
      - generia_network
      
  world-service:
    build:
      context: .
      dockerfile: services/world-service/Dockerfile
    container_name: generia-world-service
    restart: always
    ports:
      - "8091:8088"
    depends_on:
      postgres:
        condition: service_healthy
      consul:
        condition: service_started

      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=world-service
      - SERVICE_PORT=8088
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=world-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=generia
      - DB_SSL_MODE=disable

      - MONGODB_URI=mongodb://admin:password@mongodb:27017
      - MONGODB_DATABASE=generia_worlds
    networks:
      - generia_network
      
  character-service:
    build:
      context: .
      dockerfile: services/character-service/Dockerfile
    container_name: generia-character-service
    restart: always
    ports:
      - "8089:8089"
    depends_on:
      postgres:
        condition: service_healthy
      consul:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=character-service
      - SERVICE_PORT=8089
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=character-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=generia
      - DB_SSL_MODE=disable
    networks:
      - generia_network

  cache-service:
    build:
      context: .
      dockerfile: services/cache-service/Dockerfile
    container_name: generia-cache-service
    restart: always
    ports:
      - "8086:8086"
    depends_on:
      redis:
        condition: service_healthy
      consul:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=cache-service
      - SERVICE_PORT=8086
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=cache-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - REDIS_ADDRESS=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=1
    networks:
      - generia_network

  cdn-service:
    build:
      context: .
      dockerfile: services/cdn-service/Dockerfile
    container_name: generia-cdn-service
    restart: always
    ports:
      - "8087:8087"
    depends_on:
      consul:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - SERVICE_NAME=cdn-service
      - SERVICE_PORT=8087
      - SERVICE_HOST=0.0.0.0
      - CONSUL_ADDRESS=consul:8500
      - OTLP_ENDPOINT=jaeger:4318
      - TELEMETRY_SERVICE_NAME=cdn-service
      - TELEMETRY_ENVIRONMENT=production
      - TELEMETRY_SAMPLING_RATIO=1.0
      - CDN_DOMAIN=localhost
      - CDN_DEFAULT_TTL=86400
      - CDN_SIGNING_KEY=your_cdn_signing_key
    networks:
      - generia_network

  
  # AI Worker Service
  ai-worker:
    build:
      context: ./services/ai-worker
      dockerfile: Dockerfile
    container_name: generia-ai-worker
    restart: always
    depends_on:
      mongodb:
        condition: service_started
      temporal:
        condition: service_healthy
      minio:
        condition: service_started
      consul:
        condition: service_started
      character-service:
        condition: service_started
      post-service:
        condition: service_started
      media-service:
        condition: service_started
    environment:
      - SERVICE_NAME=ai-worker
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8089
      - MONGODB_URI=mongodb://admin:password@mongodb:27017
      - MONGODB_DATABASE=generia_ai_worker
      # Temporal configuration
      - TEMPORAL_HOST=temporal:7233
      - TEMPORAL_NAMESPACE=default
      # Storage and services
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=generia-images
      - MINIO_USE_SSL=false
      - LOG_LEVEL=DEBUG
      - API_GATEWAY_URL=http://api-gateway:8080
      - CONSUL_ADDRESS=consul:8500
      # Optimized concurrency limits
      - MAX_CONCURRENT_TASKS=500
      - MAX_CONCURRENT_LLM_REQUESTS=50
      - MAX_CONCURRENT_IMAGE_REQUESTS=30
      - MAX_CONCURRENT_GRPC_CALLS=100
      - MAX_CONCURRENT_DB_OPERATIONS=20
      - MAX_WORKFLOW_TASKS_PER_WORKER=100
      - MAX_ACTIVITIES_PER_WORKER=200
    networks:
      - generia_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: generia-frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - generia_network

volumes:
  postgres_data:
  temporal_postgres_data:
  redis_data:
  mongo_data:
  minio_data:
  grafana_data:

networks:
  generia_network:
    driver: bridge